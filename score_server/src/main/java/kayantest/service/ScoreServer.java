package kayantest.service;

import kayantest.domain.PlayerScore;

/**
 * This is a simple interface of a game server for King games in it's purest form.
 * The following example code shows how the methods tie together.
 * <pre>
 *  String sessionKey = scoreServer.getSessionKey(17);
 *  scoreServer.registerScore(sessionKey, 42, 4711);
 *  ScoreListEntry[] top15 = scoreServer.getTop15(42);
 * </pre>
 * Implementations of this interface must be thread safe in all calls.
 */
public interface ScoreServer {
	/**
	 * This function returns a sessionkey in the form of a string
	 * (without spaces or “strange” characters) which shall be valid
	 * for use with {@link #registerScore(String, int, int)} for 10 minutes. The sessionkeys
	 * should be “reasonably unique”.
	 *
	 * @param playerId A positive integer identifying the player.
	 * @return A string that can be used to look up the playerId
	 */
	public String getSessionKey(int playerId);

	/**
	 * Register a new score for a player identified by the sessionKey.
	 *
	 * @param sessionKey A string generated by {@link #getSessionKey(int)}
	 * @param level      A positive integer being the id of the level for which the score is to be stored
	 * @param score      Score achieved by the player
	 */
	public void registerScore(String sessionKey, int level, int score);

	/**
	 * Retrieves the high scores for a specific level. The result is an array
	 * in descending score order. No more than 15 scores are
	 * to be returned and for each player only the highest score counts. ie:
	 * a player id can only appear at most once in the list. If a player hasn't
	 * submitted a score for the level, no score is present for that player.
	 * A request for a high score list of a level without any scores submitted
	 * shall be a valid empty array.
	 *
	 * @param level A positive integer being the id of the level
	 * @return A sorted array of {@link ScoreListEntry} elements, where the first element has the highest score.
	 */
	public PlayerScore[] getToplist(int level);
}
